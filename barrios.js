const fs = require('fs');
const path = require('path');

const inputPath = path.join(__dirname, 'data/vacunatorios_coordinates.json');
const outputPath = path.join(__dirname, 'data/vacunatorios_coordinates_con_barrios.json');

/**
 * MEJOR ENFOQUE: Analizador inteligente de direcciones argentinas
 *
 * Estrategia:
 * 1. Clasificar cada segmento por tipo (calle, n√∫mero, barrio, ciudad, etc.)
 * 2. Usar patrones espec√≠ficos para cada provincia
 * 3. Aplicar reglas de contexto geogr√°fico
 * 4. Fallback inteligente basado en posici√≥n y caracter√≠sticas
 */

class BarrioExtractor {
    constructor() {
        // Patrones para identificar diferentes tipos de segmentos
        this.patterns = {
            // C√≥digos postales argentinos
            codigoPostal: /^([A-Z]?\d{4,5})$/,

            // N√∫meros de direcci√≥n
            numero: /^\d+$/,

            // Calles/avenidas
            calle: /^(Av\.|Avenida|Calle|Pasaje|Boulevard|Bv\.|Blvd\.|Ruta|Route|Camino)/i,

            // T√©rminos administrativos que NO son barrios
            administrativo: /^(Municipio|Partido|Departamento|Distrito|Pedan√≠a|Comuna|Provincia)\s+(de\s+)?/i,

            // Pa√≠ses
            pais: /^(Argentina|Chile|Uruguay|Paraguay|Brasil|Bolivia)$/i,

            // Prefijos de barrio
            prefijoBarrio: /^(Barrio|B¬∞|Villa|Pueblo|Conjunto|Complejo|Urbanizaci√≥n)/i
        };

        // Provincias argentinas y sus variantes
        this.provincias = new Set([
            'Buenos Aires', 'C√≥rdoba', 'Santa Fe', 'Mendoza', 'Tucum√°n',
            'Entre R√≠os', 'Salta', 'Chaco', 'Corrientes', 'Misiones',
            'San Juan', 'Jujuy', 'R√≠o Negro', 'Neuqu√©n', 'Formosa',
            'Chubut', 'San Luis', 'Catamarca', 'La Rioja', 'La Pampa',
            'Santa Cruz', 'Tierra del Fuego', 'Ciudad Aut√≥noma de Buenos Aires'
        ]);

        // Ciudades principales por provincia
        this.ciudadesPrincipales = {
            'Buenos Aires': ['La Plata', 'Mar del Plata', 'Bah√≠a Blanca', 'Quilmes', 'Lan√∫s'],
            'C√≥rdoba': ['C√≥rdoba', 'R√≠o Cuarto', 'Villa Carlos Paz', 'Villa Mar√≠a'],
            'Santa Fe': ['Rosario', 'Santa Fe', 'Rafaela', 'Venado Tuerto'],
            'Entre R√≠os': ['Paran√°', 'Concordia', 'Gualeguaych√∫', 'Concepci√≥n del Uruguay'],
            'Mendoza': ['Mendoza', 'San Rafael', 'Maip√∫', 'Godoy Cruz'],
            'Tucum√°n': ['San Miguel de Tucum√°n', 'Concepci√≥n', 'Banda del R√≠o Sal√≠']
        };

        // T√©rminos que indican fin de barrio
        this.terminadores = new Set([
            'Argentina', 'Ciudad Aut√≥noma de Buenos Aires'
        ]);
    }

    /**
     * Clasifica un segmento de la direcci√≥n
     */
    clasificarSegmento(segmento, posicion, totalSegmentos) {
        const seg = segmento.trim();

        if (this.patterns.codigoPostal.test(seg)) return 'codigo_postal';
        if (this.patterns.numero.test(seg)) return 'numero';
        if (this.patterns.calle.test(seg)) return 'calle';
        if (this.patterns.administrativo.test(seg)) return 'administrativo';
        if (this.patterns.pais.test(seg)) return 'pais';
        if (this.provincias.has(seg)) return 'provincia';
        if (this.terminadores.has(seg)) return 'terminador';

        // Buscar en ciudades principales
        for (const [provincia, ciudades] of Object.entries(this.ciudadesPrincipales)) {
            if (ciudades.includes(seg)) return 'ciudad';
        }

        // Si empieza con prefijo de barrio, es barrio
        if (this.patterns.prefijoBarrio.test(seg)) return 'barrio';

        // Por posici√≥n: primeros elementos tienden a ser direcciones
        if (posicion <= 1) return 'direccion';

        // √öltimos elementos tienden a ser administrativos
        if (posicion >= totalSegmentos - 3) return 'administrativo_probable';

        return 'candidato_barrio';
    }

    /**
     * Extrae barrio usando an√°lisis contextual
     */
    extraerBarrio(displayName, provincia, localidad) {
        if (!displayName) return null;

        const segmentos = displayName.split(',').map(s => s.trim());
        const clasificaciones = segmentos.map((seg, i) => ({
            texto: seg,
            posicion: i,
            tipo: this.clasificarSegmento(seg, i, segmentos.length)
        }));

        // Estrategia 1: Buscar segmentos expl√≠citamente marcados como barrio
        const barrioExplicito = clasificaciones.find(c => c.tipo === 'barrio');
        if (barrioExplicito) {
            return barrioExplicito.texto;
        }

        // Estrategia 2: Buscar candidatos a barrio en posici√≥n correcta
        const candidatos = clasificaciones.filter(c => c.tipo === 'candidato_barrio');

        // Para Buenos Aires: buscar antes de "Buenos Aires" o "Comuna"
        if (provincia === 'Capital Federal' || provincia === 'Buenos Aires') {
            for (let i = 0; i < clasificaciones.length; i++) {
                const actual = clasificaciones[i];
                if (actual.texto === 'Buenos Aires' || actual.texto.startsWith('Comuna')) {
                    if (i > 0) {
                        const anterior = clasificaciones[i - 1];
                        if (anterior.tipo === 'candidato_barrio') {
                            return anterior.texto;
                        }
                    }
                }
            }
        }

        // Estrategia 3: Buscar antes de la ciudad conocida
        for (let i = 0; i < clasificaciones.length; i++) {
            const actual = clasificaciones[i];
            if (actual.tipo === 'ciudad' || actual.texto === localidad) {
                if (i > 0) {
                    const anterior = clasificaciones[i - 1];
                    if (anterior.tipo === 'candidato_barrio') {
                        return anterior.texto;
                    }
                }
            }
        }

        // Estrategia 4: Buscar antes de t√©rminos administrativos
        for (let i = 0; i < clasificaciones.length; i++) {
            const actual = clasificaciones[i];
            if (actual.tipo === 'administrativo') {
                if (i > 0) {
                    const anterior = clasificaciones[i - 1];
                    if (anterior.tipo === 'candidato_barrio') {
                        return anterior.texto;
                    }
                }
            }
        }

        // Estrategia 5: Tomar el primer candidato v√°lido en posici√≥n media
        const candidatosPosicionMedia = candidatos.filter(c =>
            c.posicion >= 2 && c.posicion < clasificaciones.length - 2
        );

        if (candidatosPosicionMedia.length > 0) {
            return candidatosPosicionMedia[0].texto;
        }

        // Estrategia 6: Fallback - cualquier candidato disponible
        if (candidatos.length > 0) {
            return candidatos[0].texto;
        }

        return null;
    }

    /**
     * Procesa el archivo completo
     */
    procesarArchivo() {
        try {
            console.log('üîç Cargando archivo...');
            const data = JSON.parse(fs.readFileSync(inputPath, 'utf8'));

            console.log(`üìä Procesando ${data.data.length} registros...`);

            let stats = {
                total: 0,
                conBarrio: 0,
                sinBarrio: 0,
                porProvincia: {},
                ejemplosAnalisis: []
            };

            data.data = data.data.map((vac, index) => {
                stats.total++;

                // Contar por provincia
                if (!stats.porProvincia[vac.provincia]) {
                    stats.porProvincia[vac.provincia] = { total: 0, conBarrio: 0 };
                }
                stats.porProvincia[vac.provincia].total++;

                const barrio = this.extraerBarrio(vac.displayName, vac.provincia, vac.localidad);

                if (barrio) {
                    stats.conBarrio++;
                    stats.porProvincia[vac.provincia].conBarrio++;
                } else {
                    stats.sinBarrio++;

                    // Guardar algunos ejemplos para an√°lisis
                    if (stats.ejemplosAnalisis.length < 20) {
                        stats.ejemplosAnalisis.push({
                            id: vac.id,
                            provincia: vac.provincia,
                            localidad: vac.localidad,
                            displayName: vac.displayName
                        });
                    }
                }

                // Mostrar progreso cada 1000 registros
                if (index % 1000 === 0) {
                    console.log(`   Procesados: ${index}/${data.data.length}`);
                }

                return { ...vac, barrio };
            });

            // Guardar archivo
            fs.writeFileSync(outputPath, JSON.stringify(data, null, 2), 'utf8');

            // Mostrar estad√≠sticas detalladas
            this.mostrarEstadisticas(stats);

            console.log('\n‚úÖ Archivo generado exitosamente:', outputPath);

        } catch (error) {
            console.error('‚ùå Error:', error.message);
            console.error(error.stack);
        }
    }

    /**
     * Muestra estad√≠sticas detalladas
     */
    mostrarEstadisticas(stats) {
        console.log('\nüìà === ESTAD√çSTICAS DETALLADAS ===');
        console.log(`Total procesados: ${stats.total}`);
        console.log(`‚úÖ Con barrio: ${stats.conBarrio} (${(stats.conBarrio/stats.total*100).toFixed(1)}%)`);
        console.log(`‚ùå Sin barrio: ${stats.sinBarrio} (${(stats.sinBarrio/stats.total*100).toFixed(1)}%)`);

        console.log('\nüó∫Ô∏è  Por provincia:');
        Object.entries(stats.porProvincia)
            .sort(([,a], [,b]) => b.total - a.total)
            .forEach(([provincia, datos]) => {
                const porcentaje = (datos.conBarrio/datos.total*100).toFixed(1);
                console.log(`  ${provincia}: ${datos.conBarrio}/${datos.total} (${porcentaje}%)`);
            });

        if (stats.ejemplosAnalisis.length > 0) {
            console.log('\nüîç Ejemplos sin barrio para an√°lisis:');
            stats.ejemplosAnalisis.slice(0, 10).forEach(ejemplo => {
                console.log(`  [${ejemplo.provincia}] ${ejemplo.displayName}`);
            });
        }
    }
}

// Ejecutar el extractor
const extractor = new BarrioExtractor();
extractor.procesarArchivo();
